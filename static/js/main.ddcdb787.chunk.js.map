{"version":3,"sources":["components/Carousel.js","services/data.service.js","components/LobbyModal.js","components/Home.js","components/DrawGameWordChoice.js","components/SecretWordModal.js","components/Draw.js","components/Impostor.js","components/ScorePage.js","components/Lobby.js","App.js","index.js"],"names":["imgUrls","Carousel","props","useState","currentImageIndex","setCurrentImageIndex","className","id","onClick","changeCharacterIndex","src","createSocket","socketIOClient","createRoom","socket","username","characterIndex","emit","joinRoom","gameCode","console","log","checkForRoom","callback","a","response","getRoomInfo","LobbyModal","params","setGameCode","setUsername","setCharacterIndex","history","useHistory","Toast","loading","dataService","hide","push","pathname","state","roomOwner","fail","Modal","show","onHide","size","aria-labelledby","centered","Body","type","value","InputGroup","FormControl","onChange","ev","target","placeholder","aria-label","aria-describedby","length","Button","variant","disabled","Prepend","Text","Home","modalShow","setModalShow","isGameCodeParams","match","DrawGameWordChoice","undefined","words","setWords","useEffect","data","chooseWord","choice","first","second","SecretWordModal","secretword","Draw","canvasRef","useRef","colorsRef","bounding","messagesEndRef","myTurn","color","lineWidth","roomInfo","setRoomInfo","socketInfo","setSocketInfo","inputValue","setInputValue","chatFeed","setChatFeed","modalSecretShow","setModalSecretShow","secretWord","setSecretWord","timeDraw","setTimeDraw","initDraw","roomID","isMyTurn","on","current","canvas","context","getContext","drawing","drawLine","x0","y0","x1","y1","beginPath","moveTo","lineTo","strokeStyle","lineJoin","lineCap","stroke","closePath","w","width","h","height","onMouseUp","e","x","y","clientX","clientY","addEventListener","getBoundingClientRect","scrollIntoView","behavior","scrollToBottom","count","nextGame","replace","map","key","i","style","backgroundColor","socketID","name","points","charIndex","toString","ref","content","Append","answer","Impostor","wordInput","setWordInput","gameState","setGameState","voteChoice","setVoteChoice","canVote","setCanVote","handleChange","handleSubmit","handleCheckbox","impostor","impostorWords","textAlign","marginTop","class","ScorePage","Lobby","setSocket","round","setRound","setRoomID","setSocketID","setNextGame","idx","location","href","isAdmin","App","to","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ddcdb787.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport {FaArrowRight, FaArrowLeft} from 'react-icons/fa';\n\nconst imgUrls = [\n    \"\",\n    \"./images/svg/1-character.svg\",\n    \"./images/svg/2-character.svg\",\n    \"./images/svg/3-character.svg\",\n    \"./images/svg/4-character.svg\",\n    \"./images/svg/5-character.svg\",\n    \"./images/svg/6-character.svg\",\n    \"./images/svg/7-character.svg\",\n    \"./images/svg/8-character.svg\",\n    \"./images/svg/9-character.svg\",\n    \"./images/svg/10-character.svg\"\n];\n\nconst Carousel = (props) => {\n    const [currentImageIndex,\n        setCurrentImageIndex] = useState(1)\n    const [characterIndex,\n        setCharacterIndex] = useState(1)\n\n    function previousSlide() {\n        setCurrentImageIndex(currentImageIndex <= 1\n            ? 10\n            : currentImageIndex - 1)\n\n        props.changeCharacterIndex(currentImageIndex == 1\n            ? 10\n            : currentImageIndex - 1)\n    }\n\n    function nextSlide() {\n        setCurrentImageIndex(currentImageIndex >= 10\n            ? 1\n            : currentImageIndex + 1)\n\n        props.changeCharacterIndex(currentImageIndex == 10\n            ? 1\n            : currentImageIndex + 1)\n\n    }\n    return (\n        <div className=\"carousel\">\n            <span id=\"carousel-arrow\" onClick={previousSlide}><FaArrowLeft/>\n            </span>\n            <img src={imgUrls[currentImageIndex]} id={currentImageIndex}/>\n            <span id=\"carousel-arrow\" onClick={nextSlide}>\n                <FaArrowRight/>\n            </span>\n        </div>\n    );\n}\n\nexport default Carousel","import socketIOClient from \"socket.io-client\";\n\n//const ENDPOINT = \"http://127.0.0.1:5000\";\nconst ENDPOINT = \"https://api-wac.herokuapp.com/\";\n\nconst createSocket = () => {\n    return socketIOClient(ENDPOINT)\n}\n\nconst createRoom = (socket, username, characterIndex) => {\n    socket.emit(\"create-room\", [username, characterIndex, 1])\n}\n\nconst joinRoom = (socket, gameCode, username, characterIndex) => {\n    console.log(\"join\")\n    socket.emit(\"request-join\", [gameCode, username, characterIndex, 0])\n}\n\nconst checkForRoom = async (socket, gameCode, callback) => {\n    return await socket.emit(\"check-for-room\", [gameCode], \n        response => {callback(response)})\n}\n\nconst getRoomInfo = (socket, gameCode) => {\n    socket.emit(\"GetRoomInfo\", gameCode)\n}\n\nexport default {\n    createSocket,\n    createRoom,\n    joinRoom,\n    checkForRoom,\n    getRoomInfo,\n}","import {useState} from 'react'\nimport Carousel from './Carousel'\nimport {Button, InputGroup, FormControl, Modal} from 'react-bootstrap';\nimport Toast from 'light-toast';\nimport {useHistory} from \"react-router-dom\";\nimport dataService from '../services/data.service';\n\nconst LobbyModal = (props) => {\n    const [gameCode,\n        setGameCode] = useState(props.params ?? '')\n    const [username,\n        setUsername] = useState('')\n    const [characterIndex,\n        setCharacterIndex] = useState(1)\n    const history = useHistory();\n\n    function handleChange(ev) {\n        setUsername(ev.target.value)\n    }\n\n    function handleChangeGameCode(ev) {\n        setGameCode(ev.target.value)\n    }\n\n    function createRoom() {\n        history.push({\n            pathname: `/projet_libre/lobby`,\n            state: {\n                username: username,\n                characterIndex: characterIndex,\n                gameCode: gameCode,\n                roomOwner: true\n            }\n        });\n        console.log(\"create\")\n    }\n\n    async function joinRoom() {\n        Toast.loading(\"Loading ...\");\n        const socket = dataService.createSocket()\n        await dataService.checkForRoom(socket, props.params ?? gameCode, function (response) {\n            console.log(response)\n            Toast.hide();\n            if (!response) {\n                Toast.fail(\"Erreur cette partie n'existe pas\", 2000);\n            } else {\n                history.push({\n                    pathname: `/projet_lbre/lobby`,\n                    state: {\n                        username: username,\n                        characterIndex: characterIndex,\n                        gameCode: gameCode,\n                        roomOwner: false\n                    }\n                });\n            }\n        })\n    }\n\n    function changeCharacterIndex(value) {\n        setCharacterIndex(value)\n    }\n\n    return (\n        <Modal\n            {...props}\n            show={props.show}\n            onHide={props.onHide}\n            size=\"l\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            className=\"Modal\">\n            <Modal.Body className=\"modal-body\">\n                <button onClick={props.onHide} type=\"button\" className=\"close\">\n                    ×\n                </button>\n                <h4 id=\"h4-modal\">Je choisis mon avatar</h4>\n\n                <div className=\"caroussel\">\n                    <Carousel changeCharacterIndex ={changeCharacterIndex}/>\n                </div>\n                <InputGroup className=\"mb-3\" id=\"username\">\n                    <FormControl\n                        value={username}\n                        onChange={handleChange}\n                        placeholder=\"Pseudo\"\n                        aria-label=\"Username\"\n                        aria-describedby=\"basic-addon1\"/>\n                </InputGroup>\n                <div id=\"character-counter\">{(username.length > 0)\n                        ? <span>{username.length}\n                                / 15</span>\n                        : null}</div>\n                <br/> {((username.length >= 3 && username.length <= 15) && gameCode.length == 0)\n                    ? <Button onClick={createRoom} variant=\"success\" id=\"create-game-btn\">Créer une partie</Button>\n                    : <Button disabled variant=\"success\" id=\"create-game-btn\">Créer une partie</Button>}\n                <InputGroup className=\"mb-3\" id=\"join-game-btn\">\n                    <InputGroup.Prepend>\n                        {(gameCode.length >= 20 && username.length >= 3)\n                            ? <Button onClick={joinRoom} variant=\"success\" id=\"join-game-btn2\">Rejoindre une partie</Button>\n                            : <Button disabled variant=\"success\" id=\"join-game-btn2\">Rejoindre une partie</Button>}\n                    </InputGroup.Prepend>\n                    <InputGroup.Prepend>\n                        <InputGroup.Text id=\"basic-addon1\">#</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                        aria-describedby=\"basic-addon1\"\n                        placeholder=\"Code de la partie\"\n                        value={gameCode}\n                        onChange={handleChangeGameCode}/>\n                </InputGroup>\n            </Modal.Body>\n        </Modal>\n    );\n\n}\n\nexport default LobbyModal\n","import {React, useState} from 'react'\nimport LobbyModal from \"./LobbyModal\"\nimport {Button} from \"react-bootstrap\"\n\n\nconst Home = (props) => {\n    const [modalShow, setModalShow] = useState(false)\n    const isGameCodeParams = props.match.params.id;\n\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"devise\"> \n\t\t\t\t<img src=\"./images/svg/logo.png\" />\n\t\t\t</div>\n\t\t\t<div className=\"create-join-game\">\n\t\t\t\t<Button variant=\"primary\" onClick={() => setModalShow(true)}>\n\t\t\t\t\tCréer / Rejoindre une partie\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t<div className=\"mini-games-details\">\n\t\t\t\t<div className=\"draw\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<img src=\"./images/svg/draw.png\"/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>Le but est simple !</p>\n\t\t\t\t\t<p>Faire découvrir un mot, une expression ou une idée aux autres joueurs , dans un temps limité (2mn), à l'aide d'un dessin.</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"impostor\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<img src=\"./images/svg/impostor.png\"/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tLe but des 3 joueurs est de démasquer l'imposteur !\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tAu début de chaque manche du jeu , le même mot sera donné a 3 joueurs et un mot proche de celui ci sera donné a l'imposteur (ex:requin → dauphin).\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tChacun son tour , chacun des 4 joueurs devra donner un mot du même champ lexical que le mot donné, le tout sur 4 tours.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<LobbyModal\n\t\t\t\tshow={isGameCodeParams ? true : modalShow}\n\t\t\t\tonHide={() => setModalShow(false) }\n\t\t\t\tparams={isGameCodeParams ?? null}\n\t\t\t/>\n\t\t</>\n\t)\n}\n\n\nexport default Home","import React, {useEffect, useState} from 'react';\nimport {Button, Modal} from 'react-bootstrap';\n\n\nconst DrawGameWordChoice = (props) =>{\n    const [words, setWords] = useState(undefined)\n    useEffect(() => {\n        props.socket.emit(\"getWord\", function(data){\n            setWords(data)\n        })\n    }, [])\n\n    const chooseWord = (choice) =>{\n        props.socket.emit(\"choosenWord\", choice)\n        props.onHide()\n    }\n    return (\n        <Modal\n            {...props}\n            show={props.show}\n            onHide={props.onHide}\n            size=\"l\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            className=\"Modal\">\n            <Modal.Body className=\"modal-body\">\n               <div>\n                   <div>\n                       <h2>Vous devez choisir un mot !</h2>\n                   </div>\n                <br/>\n                <br/>\n                <br/>\n                   { words && (\n                        <div>\n                            <Button onClick={() => chooseWord(words.first)} variant=\"outline-dark\">{words.first}</Button>\n                            <Button onClick={() => chooseWord(words.second)} variant=\"outline-dark\">{words.second} </Button>\n                        </div>\n                   )}\n               </div>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default DrawGameWordChoice;","import React, {useEffect, useState} from 'react';\nimport {Button, Modal} from 'react-bootstrap';\n\n\nconst SecretWordModal = (props) =>{\n    return (\n        <Modal\n            {...props}\n            show={props.show}\n            onHide={props.onHide}\n            size=\"l\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            className=\"Modal\">\n            <Modal.Body className=\"modal-body\">\n               <div>\n                  le mot était : {props.secretword}\n               </div>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default SecretWordModal;","import React, {useRef, useEffect, useState} from 'react';\nimport DrawGameWordChoice from './DrawGameWordChoice'\nimport SecretWordModal from './SecretWordModal'\nimport {InputGroup, FormControl, Button} from 'react-bootstrap';\n\nconst Draw = props => {\n    const canvasRef = useRef(null);\n    const colorsRef = useRef(null);\n    const bounding = useRef(null);\n    const messagesEndRef = useRef(null);\n    const myTurn = useRef(false);\n    const color = useRef(\"black\");\n    const lineWidth = useRef(8);\n    const [roomInfo, setRoomInfo] = useState(null)\n    const [socketInfo, setSocketInfo] = useState(null)\n    const [inputValue, setInputValue] = useState('')\n    const [chatFeed, setChatFeed] = useState(null)\n    const [modalShow, setModalShow] = useState(false)\n    const [modalSecretShow, setModalSecretShow] = useState(false)\n    const [secretWord, setSecretWord] = useState(null)\n    const [timeDraw, setTimeDraw] = useState(0)\n\n\n    useEffect(() => {\n        initDraw()\n        props.socket.emit(\"GetRoomInfo\", props.roomID)\n        props.socket.emit(\"GetMyData\", function(response){\n            setSocketInfo(response)\n            if (response.isMyTurn){\n                setModalShow(true)\n            }\n        })\n    }, []);\n\n    props\n        .socket\n        .on(\"GetRoomInfo\", function(data){\n            setRoomInfo(data)\n    })\n\n    const initDraw = () =>{\n        if (canvasRef.current == null) return\n        const canvas = canvasRef.current;\n        const context = canvas.getContext('2d');\n\n        const current = {\n          };\n\n        let drawing = false;\n\n        const drawLine = (x0, y0, x1, y1, color, lineWidth, emit) => {\n            context.beginPath();\n            context.moveTo(x0-475, y0-140);\n            context.lineTo(x1-475, y1-140);\n            context.strokeStyle = color\n            context.lineWidth = lineWidth;\n            context.lineJoin = context.lineCap = 'round';\n            context.stroke();\n            context.closePath();\n\n            if (!emit) {\n                return;\n            }\n            const w = canvas.width;\n            const h = canvas.height;\n\n\n            props\n                .socket\n                .emit('drawing', {\n                    x0: x0 / w,\n                    y0: y0 / h,\n                    x1: x1 / w,\n                    y1: y1 / h,\n                    color,\n                    lineWidth\n                });\n        };\n\n        // ---------------- mouse movement --------------------------------------\n\n        const onMouseDown = (e) => {\n            if(!myTurn.current) return\n\n            drawing = true;\n            current.x = e.clientX;\n            current.y = e.clientY;\n        };\n\n        const onMouseMove = (e) => {\n            if(!myTurn.current) return\n\n            if (!drawing) {\n                return;\n            }\n            drawLine(current.x, current.y, e.clientX, e.clientY, color.current, lineWidth.current, true);\n            current.x = e.clientX;\n            current.y = e.clientY;\n        };\n\n        const onMouseUp = (e) => {\n            if(!myTurn.current) return\n\n            if (!drawing) {\n                return;\n            }\n            drawing = false;\n            drawLine(current.x, current.y, e.clientX, e.clientY, color.current, lineWidth.current, true);\n        };\n\n        canvas.addEventListener('mousedown', onMouseDown, false);\n        canvas.addEventListener('mouseup', onMouseUp, false);\n        canvas.addEventListener('mouseout', onMouseUp, false);\n        canvas.addEventListener('mousemove', onMouseMove, false);\n\n        // -------------- make the canvas fill its parent component -----------------\n\n        canvas.width = bounding.current.getBoundingClientRect().height;\n        canvas.height = bounding.current.getBoundingClientRect().width\n\n\n        // ----------------------- socket.io connection ----------------------------\n        const onDrawingEvent = (data) => {\n            console.log(\"event\")\n            const w = canvas.width;\n            const h = canvas.height;\n            drawLine(data.x0 * w, data.y0 * h, data.x1 * w, data.y1 * h, data.color, data.lineWidth);\n        }\n        \n        props\n            .socket\n            .on('drawing', onDrawingEvent);\n    }\n\n    const handleChatInput = (ev) =>{\n        setInputValue(ev.target.value)\n    }\n\n    const handleChatSubmit = () =>{\n        if (socketInfo.answer) return\n        if (socketInfo.isMyTurn) return\n        props.socket.emit(\"drawChatInput\", [inputValue, timeDraw])\n        setInputValue('')\n        props.socket.emit(\"GetRoomInfo\", props.roomID)\n        props.socket.emit(\"GetMyData\", function(response){\n            setSocketInfo(response)\n        })\n    }\n\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\n      }\n\n    useEffect(() => {\n        props\n            .socket\n            .on('getDrawChatContent', function(data){\n                setChatFeed(data)\n                scrollToBottom()\n        })\n\n\n        props\n            .socket\n            .on('counter', function (count) {\n                console.log(count)\n            });\n\n        props.socket.on(\"myTurnToDraw\", function(data){\n            myTurn.current = true\n\n        })\n\n        props.socket.on(\"second\", () => {\n            props.nextGame(2)\n        })\n    \n\n        props.socket.on(\"choosenWord\", data =>{\n            setSecretWord(data)\n            console.log(\"send clock\")\n            props.socket.emit(\"startClockDraw\")\n        })\n    \n\n        props.socket.on('drawTime', data =>{\n            setTimeDraw(data)\n        })\n\n        props.socket.on(\"drawTimeOver\", data =>{\n            setModalSecretShow(false)\n            myTurn.current = false\n            props.socket.emit(\"GetMyData\", function(response){\n                setSocketInfo(response)\n            })\n            props.socket.emit(\"GetRoomInfo\", props.roomID)\n            props.socket.emit(\"GetMyData\", function(response){\n                setSocketInfo(response)\n                if (response.isMyTurn){\n                    setModalShow(true)\n                }\n            })\n            initDraw()\n\n        })\n\n        props.socket.on(\"reveal\", () =>{\n            setModalSecretShow(true)\n        })\n    }, [])\n\n\n    return (\n        <div className=\"draw-main-container\">\n            <div className=\"draw-header-container\">\n                <div className=\"draw-header-time-round\">\n                    { timeDraw && (\n                        \"temps : \" + timeDraw\n                    )}\n                </div>\n                <div className=\"draw-header-secretword\">\n                   {secretWord && (socketInfo.isMyTurn\n                    ? secretWord\n                    : secretWord.replace(/[a-zA-Z0-9_]/g, '_')) }\n                </div>\n            </div>\n            <div className=\"draw-body-container\">\n                <div className=\"draw-score-container\">\n                { roomInfo && (roomInfo.map((key, i) => \n                            <div className=\"draw-score-character-slot\" \n                                key={key.socketID.toString()} \n\n\n                                style={key.isMyTurn \n                                    ? {backgroundColor:\"green\"}\n                                    : i % 2 == 0 ? {backgroundColor:\"rgba(0, 0, 0, 0.37)\"} \n                                    : {backgroundColor:\"rgba(0, 0, 0, 0.638)\"}}>\n\n\n                                <div className=\"draw-score-character-slot-name-score\">\n                                    <div><p style={key.socketID == props.socketID ? {color:\"red\"} : null}>{key.name}{key.socketID == props.socketID ? \" (Vous)\" : null}</p></div>\n                                    <div><p>points: {key.points}</p></div>\n                                </div>\n                                <div className=\"draw-score-character-slot-avatar\"> \n                                    <img src={`./images/svg/${key.charIndex}-character.svg`} />\n                                </div>\n                            </div>\n                ))}\n                </div>\n                <div ref={bounding} className=\"draw-canvas-container\">\n                    <canvas ref={canvasRef} className=\"whiteboard\"/>\n                    { (roomInfo && socketInfo && socketInfo.isMyTurn) &&  (<div ref={colorsRef} className=\"colors\">\n                            <div className=\"color white\" onClick={() => {color.current = \"white\"}}/>\n                            <div className=\"color lightgray\" onClick={() => {color.current = \"lightgray\"}} />\n                            <div className=\"color red\" onClick={() => {color.current = \"red\"}} />\n                            <div className=\"color orange\" onClick={() => {color.current = \"orange\"}} />\n                            <div className=\"color yellow\" onClick={() => {color.current = \"yellow\"}} />\n                            <div className=\"color green\" onClick={() => {color.current = \"green\"}} />\n                            <div className=\"color lightskyblue\" onClick={() => {color.current = \"lightskyblue\"}} />\n                            <div className=\"color blue\"  onClick={() => {color.current = \"blue\"}} />\n                            <div className=\"color purple\"  onClick={() => {color.current = \"purple\"}} />\n                            <div className=\"color pink\" onClick={() => {color.current = \"pink\"}} />\n                            <div className=\"color brown\" onClick={() => {color.current = \"brown\"}} />\n                            <div className=\"color black\" onClick={() => {color.current = \"black\"}} />\n                            <div id=\"first-size\" className=\"size 8\" onClick={() => {lineWidth.current = 8}}>\n                                <div className=\"size 8 size-xs-icon\" onClick={() => {lineWidth.current = 8}}></div>\n                            </div>\n                            <div className=\"size 20\" onClick={() => {lineWidth.current = 20}}>\n                                <div className=\"size 20 size-m-icon\" onClick={() => {lineWidth.current = 20}}></div>\n                            </div>\n                            <div className=\"size 40\" onClick={() => {lineWidth.current = 40}}>\n                                <div className=\"size 40 size-xl-icon\" onClick={() => {lineWidth.current = 40}}></div>\n                            </div>\n                            <div className=\"tool white Erase\" onClick={() => {color.current = \"white\"}}>\n                            </div>\n                        </div>)\n                    }\n                </div>\n                    \n                <div className=\"draw-chat-container\">\n                    <div className=\"draw-chat-content\" >\n                            { chatFeed && (chatFeed.map((key,i ) => \n                                <div key={i} className=\"draw-chat-line\" style={i % 2 == 0 ? {backgroundColor:\"rgba(0, 0, 0, 0.37)\"} : {backgroundColor:\"rgba(0, 0, 0, 0.638)\"}}><p>{key.name} : {key.content}</p></div>\n                            ))}\n                            <div ref={messagesEndRef} />\n                    </div>\n                    <div className=\"draw-chat-input\">\n                        <InputGroup className=\"mb-3 draw-chat-input-content\">\n                            <FormControl\n                            placeholder=\"Réponse\"\n                            value={inputValue}\n                            onChange={handleChatInput}\n                            />\n                            <InputGroup.Append>\n                            <Button variant=\"outline-secondary\" onClick={handleChatSubmit}>Envoyer</Button>\n                            </InputGroup.Append>\n                        </InputGroup>\n                    </div>\n                </div>\n            </div>\n            <DrawGameWordChoice\n\t\t\t\tshow={modalShow}\n\t\t\t\tonHide={() => setModalShow(false) }\n                socket={props.socket}\n\t\t\t/>\n            <SecretWordModal\n                show={modalSecretShow}\n\t\t\t\tonHide={() => setModalSecretShow(false)}\n                secretword={secretWord}\n            />\n        </div>\n    );\n};\n\nexport default Draw;","import React, {useRef, useEffect, useState} from 'react';\nimport {InputGroup, FormControl, Button} from 'react-bootstrap';\n\n\nconst Impostor = props => {\n    const [roomInfo, setRoomInfo] = useState(null)\n    const [socketInfo, setSocketInfo] = useState(null)\n    const [words, setWords] = useState(null)\n    const [wordInput, setWordInput] = useState('')\n    const [gameState,setGameState] = useState(0)\n    const [voteChoice, setVoteChoice] = useState(null)\n    const [canVote, setCanVote] = useState(true)\n\n    useEffect(() =>{\n        props.socket.emit(\"GetRoomInfo\", props.roomID)\n        props.socket.emit(\"GetMyData\", function(response){\n            setSocketInfo(response)\n        })\n        props\n            .socket\n            .on(\"GetRoomInfo\", function(data){\n                setRoomInfo(data)\n                console.log(data)\n        })\n    }, [])\n\n    const handleChange = (ev) => {\n        setWordInput(ev.target.value)\n    }\n\n    const handleSubmit = () => {\n        console.log(wordInput)\n        props.socket.emit(\"submitImpostorWord\", wordInput)\n        setWordInput('')\n        props.socket.emit(\"GetRoomInfo\", props.roomID)\n    }\n    \n\n    props\n        .socket\n        .on(\"impostorWords\", data =>{\n            console.log(data)\n            setWords(data)\n        })\n\n    props\n        .socket\n        .on(\"scorePage\", () =>{\n            props.nextGame(3)\n        })\n\n    props.socket.on(\"votepage\", data => {\n        setGameState(1)\n    })\n\n    const handleCheckbox = (ev) => {\n        setVoteChoice(ev.target.value)\n    }\n\n    const submitVote = () => {\n        if (!voteChoice) return\n        props.socket.emit(\"submitVote\", voteChoice, function(data){\n            setCanVote(false)\n        })\n    }\n\n    if (gameState == 0){\n        return(\n            <div className=\"impostor-game-screen\">\n                <div className=\"header-impostor\">\n                    <div> {socketInfo && (socketInfo.impostor ? words[0] : words[1])} </div>\n                    { (roomInfo && socketInfo) && (roomInfo.map((key, i) => \n                        key.isMyTurn ? <div> au tour de : <span style={{ color:\"green\"}}>{key.name}</span></div> : null\n                    ))}\n                    {socketInfo && (socketInfo.impostor) ? <div style={{color:\"red\"}}>Vous êtes imposteur !</div> : null}\n                </div>\n                <div className=\"body-impostor\">\n                        { (roomInfo && socketInfo) && (roomInfo.map((key, i) => \n                            <div style={key.isMyTurn \n                                    ? {backgroundColor:\"green\"}\n                                    : {backgroundColor:\"rgba(0, 0, 0, 0.37)\"} }\n                                    className=\"body-impostor-cell\"\n                                    key={key.socketID}>\n    \n                                <div className=\"impostor-score-character-slot-avatar\"> \n                                    <img src={`./images/svg/${key.charIndex}-character.svg`} />\n                                    <div><p style={key.socketID == socketInfo.socketID ? {color:\"red\"} : {color:\"white\"}}>{key.name}{key.socketID == socketInfo.socketID ? \" (Vous)\" : null}</p></div>\n                                </div>\n                                {key.isMyTurn && key.socketID == socketInfo.socketID ? \n                                    <InputGroup className=\"mb-3 draw-chat-input-content\">\n                                        <FormControl\n                                        placeholder=\"Réponse\"\n                                        value={wordInput}\n                                        onChange={handleChange}\n                                        />\n                                        <InputGroup.Append>\n                                         <Button variant=\"outline-dark\" onClick={handleSubmit}>Envoyer</Button>\n                                        </InputGroup.Append>\n                                    </InputGroup>\n                                    : null\n                                }\n    \n                                    {(key.impostorWords.map((key,i) => \n                                        <div className=\"impostor-words-content-cell\">\n                                            <p>{key}</p>\n                                        </div>\n                                    ))}\n                            </div>\n                        ))}\n                </div>\n            </div>\n        )\n    }else if(gameState == 1){\n        return (\n            <div>\n            <h2 style={{textAlign:\"center\", marginTop:\"5%\", color:\"white\"}}>Qui était l'imposteur ?</h2>\n            <div className=\"impostor-game-screen-vote\">\n                { (roomInfo && socketInfo) && (roomInfo.map((key, i) => \n                     <div className=\"impostor-score-character-slot-avatar-vote\"> \n                        <img src={`./images/svg/${key.charIndex}-character.svg`} />\n                        <div><p style={key.socketID == socketInfo.socketID ? {color:\"red\"} : {color:\"white\"}}>{key.name}{key.socketID == socketInfo.socketID ? \" (Vous)\" : null}</p></div>\n                            <div class=\"form-check form-check-inline\">\n                                <input onClick={handleCheckbox} class=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id={`inlineRadio${i}`} value={key.name} />\n                            </div>\n                    </div>\n                ))}\n                \n            </div>\n            <div className=\"fdpdemerde\">\n            {canVote ? \n                <Button onClick={submitVote} variant=\"success\" id=\"create-game-btn\">Valider mon vote</Button>\n             : <p>En attente de la décision des autres joueurs...</p>\n            \n            }\n            </div>\n            \n            </div>\n        )\n    }\n}\n\nexport default Impostor","import React, {useRef, useEffect, useState} from 'react';\n\n\nconst ScorePage = props => {\n    const [roomInfo, setRoomInfo] = useState(null)\n\n    useEffect(() =>{\n        props.socket.emit(\"GetRoomInfo\", props.roomID)\n        \n        props\n            .socket\n            .on(\"GetRoomInfo\", function(data){\n                setRoomInfo(data)\n                console.log(data)\n        })\n    }, [])\n    return (\n    <div className=\"votePage\">\n        {(roomInfo) && (roomInfo.map((key, i) => \n            <div className=\"votePageCell\">\n                <img className=\"scoreImg\" src={`./images/svg/${key.charIndex}-character.svg`} />\n                <div><p className=\"scoreText\">{key.name}</p></div>\n                <div><p className=\"scoreText\">points : {key.points}</p></div>\n            </div>\n        ))}\n    </div>\n    )\n\n}\n\nexport default ScorePage","import {useEffect,useState} from \"react\";\nimport {Button, InputGroup, FormControl, Modal} from 'react-bootstrap';\nimport { useHistory } from \"react-router-dom\";\nimport dataService from '../services/data.service';\nimport Draw from './Draw'\nimport Impostor from './Impostor'\nimport ScorePage from './ScorePage'\n\n\nconst Lobby = props =>{\n    const [roomInfo, setRoomInfo] = useState(undefined)\n    const [socketInfo, setSocketInfo] = useState(undefined)\n    const [socket, setSocket] = useState(undefined)\n    const [round, setRound] = useState(0)\n    const [roomID, setRoomID] = useState(undefined)\n    const [socketID, setSocketID] = useState(undefined)\n    const history = useHistory();\n\n    useEffect(() => {\n        if (!props.location.state){return history.push('/')}\n\n        const socket = dataService.createSocket()\n            \n        if (props.location.state.roomOwner){\n            dataService.createRoom(socket, props.location.state.username, props.location.state.characterIndex)\n        }else{\n            dataService.joinRoom(socket, props.location.state.gameCode, props.location.state.username, props.location.state.characterIndex)\n        }\n\n        socket.emit(\"GetMyData\", function(response){\n            setSocketInfo(response)\n            \n        })\n        \n        socket.on(\"basicInfo\", data => {\n            console.log(\"http://localhost:3000/lobby=\"+data.roomID)\n            setRoomID(data.roomID)\n            setSocketID(data.socketID)\n\n            dataService.getRoomInfo(socket, props.location.state.gameCode ?? data.roomID)\n            socket.emit(\"GetMyData\", function(response){\n                setSocketInfo(response)\n                \n            })\n        }); \n\n        socket.on(\"GetRoomInfo\", data => {\n            setRoomInfo(data)\n        })\n        \n\n        // socket.on(\"GetMyData\", data => {\n        //     setSocketInfo(data)\n        // })\n\n        socket.on(\"startDrawRoom\", () => {\n            setRound(1)\n        })\n\n        \n\n        setSocket(socket)\n\n\n        return () => {\n            socket.emit(\"Quit\", props.location.state.username)\n        }\n    }, [])\n\n    function startGame() {\n        socket.emit(\"startGame\")\n    }\n\n    function setNextGame(idx){\n        setRound(idx)\n    }\n    \n    if(round == 0){\n        return (\n            <div className=\"Lobby-content\">\n                <div className=\"Lobby-container\">\n                    <div className=\"Lobby-params\"></div>\n                    <div className=\"Lobby-players\">\n                        <h4 style={{color:\"white\"}}>Joueurs {roomInfo && roomInfo.length}/ 4</h4>\n                        <div className=\"character-slot-container\">\n                        { roomInfo && (roomInfo.map((key) => \n                            <div className=\"character-slot\" key={key.socketID.toString()}>\n                            <p>{key.name} </p>\n                            <img src={`./images/svg/${key.charIndex}-character.svg`} />\n                            </div>\n                        ))}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"play-button\">\n                <Button variant=\"outline-dark\" href={`http://localhost:3000/lobby=${roomID}`} target={\"_blank\"}>Partager la partie</Button><br/>\n                {(socketInfo && socketInfo.isAdmin == 1 && socketInfo.length > 2) && (\n                    <Button onClick={startGame} variant=\"outline-dark\">lancer la partie </Button>\n                )}\n                </div>\n            </div>\n        )\n    }else if(round == 1){\n        return (\n            <div className=\"draw-game-scene\">\n                <Draw\n                    socket={socket}\n                    roomID={roomID}\n                    socketID={socketID}\n                    nextGame={setNextGame}\n\n                />\n            </div>\n        )\n    }else if(round == 2){\n        return (\n                <Impostor\n                    socket={socket}\n                    roomID={roomID}\n                    nextGame={setNextGame}\n                />\n        )\n    }\n    else if(round == 3){\n        return(\n            <ScorePage \n                socket={socket}\n                roomID={roomID}\n            />\n        )\n    }\n}\n\nexport default Lobby\n","import React, { useState, useEffect } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Lobby from \"./components/Lobby\";\nimport ErrorPage from \"./components/ErrorPage\"\n\nconst App = () => {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n        <div className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item\">\n            <Link to={\"/projet_pro/\"} className=\"nav-link\">\n              Home\n            </Link>\n          </li>\n        </div>\n      </nav>\n        <Switch>\n          <Route exact path={[\"/projet_pro/\",\"/projet_pro/lobby=:id\"]} component={Home} />\n          <Route exact path={[\"/projet_pro/lobby\"]} component={Lobby} />\n          <Route path={[\"*\"]} component={Home} />\n        </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}